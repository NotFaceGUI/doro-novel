name: 'publish'

on:
  push:
    tags:
      - 'v*' # 推送以 v 开头的标签时触发，如 v1.0.0

# This workflow will trigger on each push to the `main` or `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.


jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # - platform: 'macos-latest'
          #   args: '--target aarch64-apple-darwin'
          # - platform: 'macos-latest'
          #   args: '--target x86_64-apple-darwin'
          # - platform: 'ubuntu-22.04'
          #   args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    env:
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: pnpm install

      - name: apply patches
        run: pnpm run postinstall

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Debug environment variables
        run: |
          echo "TAURI_SIGNING_PRIVATE_KEY length: $($env:TAURI_SIGNING_PRIVATE_KEY.Length)"
          echo "TAURI_SIGNING_PRIVATE_KEY_PASSWORD length: $($env:TAURI_SIGNING_PRIVATE_KEY_PASSWORD.Length)"
          if ($env:TAURI_SIGNING_PRIVATE_KEY) {
            echo "TAURI_SIGNING_PRIVATE_KEY is set"
          } else {
            echo "TAURI_SIGNING_PRIVATE_KEY is NOT set"
          }
          if ($env:TAURI_SIGNING_PRIVATE_KEY_PASSWORD) {
            echo "TAURI_SIGNING_PRIVATE_KEY_PASSWORD is set"
          } else {
            echo "TAURI_SIGNING_PRIVATE_KEY_PASSWORD is NOT set"
          }
        shell: pwsh

      - name: Generate release notes
        id: release_notes
        run: |
          # 获取当前标签
          CURRENT_TAG=$(git describe --tags --exact-match HEAD 2>/dev/null || echo "")
          
          # 获取上一个标签（排除当前标签）
          if [ -n "$CURRENT_TAG" ]; then
            PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^${CURRENT_TAG}$" | head -n 1 2>/dev/null || echo "")
          else
            PREVIOUS_TAG=$(git tag --sort=-version:refname | head -n 1 2>/dev/null || echo "")
          fi
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # 如果没有上一个标签，获取所有提交
            RELEASE_NOTES=$(git log --pretty=format:"- %s" --reverse)
          else
            # 获取从上一个标签到当前的提交
            RELEASE_NOTES=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s" --reverse)
          fi
          
          # 生成精简的发布说明
          cat << EOF > release_notes.md
          ## What's Changed
          
          $RELEASE_NOTES
          
          **Full Changelog**: https://github.com/NotFaceGUI/doro-novel/compare/${PREVIOUS_TAG}...${CURRENT_TAG}
          EOF
          
          # 输出到 GitHub Actions 变量
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v__VERSION__ # the action automatically replaces __VERSION__ with the app version.
          releaseName: 'Doro Novel v__VERSION__'
          releaseBody: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: true
          updaterJsonPreferNsis: false
          updaterJsonKeepUniversal: false
          args: ${{ matrix.args }}