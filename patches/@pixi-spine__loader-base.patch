diff --git a/lib/atlasLoader.js b/lib/atlasLoader.js
index 2488ad7aa2f0f5f2b9ac672aea1e2d7abeabcab1..9eaae6d54638b15eda9b74509a141b3bb863d8be 100644
--- a/lib/atlasLoader.js
+++ b/lib/atlasLoader.js
@@ -10,25 +10,26 @@ const spineTextureAtlasLoader = {
   //     test: (asset: RawAtlas | TextureAtlas) => asset instanceof TextureAtlas,
   //     getCacheableAssets: (keys: string[], asset: RawAtlas | TextureAtlas) => getCacheableAssets(keys, asset),
   // },
+
   loader: {
     extension: {
       type: core.ExtensionType.LoadParser,
       priority: assets.LoaderParserPriority.Normal
     },
-    test(url) {
+    test (url) {
       return assets.checkExtension(url, ".atlas");
     },
-    async load(url) {
+    async load (url) {
       const response = await core.settings.ADAPTER.fetch(url);
       const txt = await response.text();
       return txt;
     },
-    testParse(asset, options) {
+    testParse (asset, options) {
       const isExtensionRight = assets.checkExtension(options.src, ".atlas");
       const isString = typeof asset === "string";
       return Promise.resolve(isExtensionRight && isString);
     },
-    async parse(asset, options, loader) {
+    async parse (asset, options, loader) {
       const metadata = options.data;
       let basePath = core.utils.path.dirname(options.src);
       console.error("Parsed basePath:", basePath, options.src);
@@ -66,7 +67,7 @@ const spineTextureAtlasLoader = {
       }
       return await retPromise;
     },
-    unload(atlas) {
+    unload (atlas) {
       atlas.dispose();
     }
   }
diff --git a/lib/atlasLoader.mjs b/lib/atlasLoader.mjs
index d875802cdf6b92a214e423000e452f47e25000f7..76bd16d3f1b2c10611f01634f1520229f060fa40 100644
--- a/lib/atlasLoader.mjs
+++ b/lib/atlasLoader.mjs
@@ -13,20 +13,20 @@ const spineTextureAtlasLoader = {
       type: ExtensionType.LoadParser,
       priority: LoaderParserPriority.Normal
     },
-    test(url) {
+    test (url) {
       return checkExtension(url, ".atlas");
     },
-    async load(url) {
+    async load (url) {
       const response = await settings.ADAPTER.fetch(url);
       const txt = await response.text();
       return txt;
     },
-    testParse(asset, options) {
+    testParse (asset, options) {
       const isExtensionRight = checkExtension(options.src, ".atlas");
       const isString = typeof asset === "string";
       return Promise.resolve(isExtensionRight && isString);
     },
-    async parse(asset, options, loader) {
+    async parse (asset, options, loader) {
       const metadata = options.data;
       let basePath = utils.path.dirname(options.src);
       console.error("Parsed basePath:", basePath, options.src);
@@ -64,7 +64,7 @@ const spineTextureAtlasLoader = {
       }
       return await retPromise;
     },
-    unload(atlas) {
+    unload (atlas) {
       atlas.dispose();
     }
   }
